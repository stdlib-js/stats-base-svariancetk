{
  "version": 3,
  "sources": ["../lib/svariancetk.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = svariancetk( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction svariancetk( N, correction, x, stride ) {\n\tvar S2;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tS2 = 0.0;\n\tS = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tS2 = float64ToFloat32( S2 + float64ToFloat32( v*v ) );\n\t\tS = float64ToFloat32( S+v );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(S2 - float64ToFloat32(float64ToFloat32(S/N)*S)) / n ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = svariancetk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = svariancetk( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction svariancetk( N, correction, x, stride, offset ) {\n\tvar S2;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\tS2 = 0.0;\n\tS = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tS2 = float64ToFloat32( S2 + float64ToFloat32( v*v ) );\n\t\tS = float64ToFloat32( S+v );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( float64ToFloat32(S2 - float64ToFloat32(float64ToFloat32(S/N)*S)) / n ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = svariancetk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar svariancetk = require( './svariancetk.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( svariancetk, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = svariancetk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a single-precision floating-point strided array using a one-pass textbook algorithm.\n*\n* @module @stdlib/stats-base-svariancetk\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var svariancetk = require( '@stdlib/stats-base-svariancetk' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = svariancetk( N, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var svariancetk = require( '@stdlib/stats-base-svariancetk' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = svariancetk.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar svariancetk;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsvariancetk = main;\n} else {\n\tsvariancetk = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = svariancetk;\n\n// exports: { \"ndarray\": \"svariancetk.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EAuBzE,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,EAAS,CAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIR,EAAIC,EACHD,GAAK,GAAKQ,GAAK,EACnB,MAAO,KAER,GAAKR,IAAM,GAAKG,IAAW,EAC1B,MAAO,GASR,IAPKA,EAAS,EACbE,GAAM,EAAEL,GAAKG,EAEbE,EAAK,EAEND,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIT,EAAGS,IACnBF,EAAIL,EAAGG,CAAG,EACVD,EAAKN,EAAkBM,EAAKN,EAAkBS,EAAEA,CAAE,CAAE,EACpDD,EAAIR,EAAkBQ,EAAEC,CAAE,EAC1BF,GAAMF,EAEP,OAAOL,EAAkBA,EAAiBM,EAAKN,EAAiBA,EAAiBQ,EAAEN,CAAC,EAAEM,CAAC,CAAC,EAAIE,CAAE,CAC/F,CAKAX,EAAO,QAAUE,IC/EjB,IAAAW,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EAyBzE,SAASC,EAAaC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CACxD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIC,EACHD,GAAK,GAAKS,GAAK,EACnB,MAAO,KAER,GAAKT,IAAM,GAAKG,IAAW,EAC1B,MAAO,GAKR,IAHAG,EAAKF,EACLC,EAAK,EACLE,EAAI,EACEG,EAAI,EAAGA,EAAIV,EAAGU,IACnBF,EAAIN,EAAGI,CAAG,EACVD,EAAKP,EAAkBO,EAAKP,EAAkBU,EAAEA,CAAE,CAAE,EACpDD,EAAIT,EAAkBS,EAAEC,CAAE,EAC1BF,GAAMH,EAEP,OAAOL,EAAkBA,EAAiBO,EAAKP,EAAiBA,EAAiBS,EAAEP,CAAC,EAAEO,CAAC,CAAC,EAAIE,CAAE,CAC/F,CAKAZ,EAAO,QAAUE,IC7EjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAc,IACdC,EAAU,IAKdF,EAAaC,EAAa,UAAWC,CAAQ,EAK7CH,EAAO,QAAUE,ICejB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAcD,EAEdC,EAAcC,EAMf,OAAO,QAAUD",
  "names": ["require_svariancetk", "__commonJSMin", "exports", "module", "float64ToFloat32", "svariancetk", "N", "correction", "x", "stride", "S2", "ix", "S", "v", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "float64ToFloat32", "svariancetk", "N", "correction", "x", "stride", "offset", "S2", "ix", "S", "v", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "svariancetk", "ndarray", "join", "tryRequire", "isError", "main", "svariancetk", "tmp"]
}
